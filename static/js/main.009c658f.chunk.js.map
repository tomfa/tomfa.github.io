{"version":3,"sources":["Components/styles.js","Components/Timeline/ImageCarousell.js","Components/Timeline/TechBadge.js","Components/Timeline/index.js","Components/FullScreen.js","Components/AwesomeSVG.js","Components/TopScreen.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["size","Image","styled","img","CarousellWrapper","div","ImageCarousell","images","thumbnail","alt","caption","useState","isOpen","setOpen","src","onClick","onClose","views","map","url","isFullscreen","BadgesWrapper","Badge","span","ProjectTypeBadge","LibraryBadge","LanguageBadge","PlatformBadge","DeploymentBadge","TechBadge","category","label","Component","projectType","library","language","platform","deployment","console","log","TechBadges","technologies","badges","Object","entries","forEach","key","values","value","push","sort","a","b","length","tech","TimeStamp","month","year","className","Icon","width","height","cx","cy","r","fill","EventDescription","p","Content","event","id","description","TimelineList","ul","TimelineListItem","li","Timeline","events","i","FullscreenWrapper","InnerFullScreen","FullScreen","children","results","colorPalettes","getRandomPalette","palette","Math","floor","random","getRandomPositions","radiuses","radius","SVGCircle","circle","AwesomeSVG","setPalette","numCircles","maxRadius","min","minRadius","getRandomSizeDistrubution","positions","setPositions","xmlns","transform","stroke","strokeWidth","FixedBottomLink","Label","h3","TopScreen","isClient","window","getSize","innerWidth","undefined","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","href","App","link","filter","e","muted","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.009c658f.chunk.js","sourcesContent":["export const size = {\n  medium: `(min-width: 480px)`,\n  large: `(min-width: 768px)`,\n};\n","import React, { useState } from 'react';\nimport Carousel, { Modal, ModalGateway } from 'react-images';\nimport styled from 'styled-components';\n\nimport { size } from '../styles';\n\nconst Image = styled.img`\n  width: 100%;\n  cursor: pointer;\n  min-height: 200px;\n\n  @media ${size.large} {\n    transition: filter 0.3s;\n    filter: brightness(0.6);\n\n    &:hover {\n      filter: brightness(1);\n    }\n  }\n`;\n\nconst CarousellWrapper = styled.div`\n  max-width: 100%;\n  max-height: 300px;\n  overflow: hidden;\n`;\n\nexport const ImageCarousell = ({ images, thumbnail }) => {\n  const alt = images[0].caption;\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <CarousellWrapper>\n      <Image src={thumbnail} alt={alt} onClick={() => setOpen(true)} />\n      <ModalGateway>\n        {isOpen ? (\n          <Modal onClose={() => setOpen(false)}>\n            <Carousel\n              views={images.map(url => ({ src: url }))}\n              isFullscreen={true}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n    </CarousellWrapper>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { size } from '../styles';\n\nconst BadgesWrapper = styled.div`\n  display: none;\n  width: 25%;\n  padding-right: 70px;\n  position: absolute;\n  bottom: 0;\n  font-size: 0.8rem;\n  cursor: pointer;\n  transition: filter 0.5s;\n  filter: brightness(0.6);\n\n  &:hover {\n    filter: brightness(1);\n  }\n\n  @media ${size.large} {\n    display: block;\n  }\n`;\n\nconst Badge = styled.span`\n  display: block;\n  color: #dddddd;\n  font-weight: 200;\n  margin-top: 4px;\n  padding: 2px;\n  text-align: right;\n  padding-right: 0.5rem;\n  border-width: 0;\n  border-right-width: 1rem;\n  border-style: solid;\n`;\n\nconst ProjectTypeBadge = styled(Badge)`\n  border-color: #e2deff;\n`;\n\nconst LibraryBadge = styled(Badge)`\n  border-color: #fffc9e;\n`;\n\nconst LanguageBadge = styled(Badge)`\n  border-color: #679943;\n`;\n\nconst PlatformBadge = styled(Badge)`\n  border-color: #93cc6a;\n`;\n\nconst DeploymentBadge = styled(Badge)`\n  border-color: #6a78cc;\n`;\n\nconst TechBadge = ({ category, label }) => {\n  const badgeMapping = {\n    projectType: ProjectTypeBadge,\n    library: LibraryBadge,\n    language: LanguageBadge,\n    platform: PlatformBadge,\n    deployment: DeploymentBadge,\n  };\n\n  const Component = badgeMapping[category];\n  if (!Component) {\n    console.log(label, category);\n  }\n  return <Component>{label}</Component>;\n};\n\nexport const TechBadges = ({ technologies }) => {\n  const badges = [];\n  Object.entries(technologies).forEach(([key, values]) => {\n    if (typeof values === 'string') {\n      values = [values];\n    }\n    values.forEach(value => badges.push({ category: key, label: value }));\n  });\n  return (\n    <BadgesWrapper>\n      {badges\n        .sort((a, b) => a.label.length - b.label.length)\n        .map(tech => (\n          <TechBadge\n            key={tech.label}\n            category={tech.category}\n            label={tech.label}\n          />\n        ))}\n    </BadgesWrapper>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { size } from '../styles';\n\nimport './Timeline.css';\n\nimport { ImageCarousell } from './ImageCarousell';\nimport { TechBadges } from './TechBadge';\n\nconst TimeStamp = ({ month, year }) => (\n  <time className=\"m-event-date\">\n    <span className=\"a-event-date-month\">{month}</span>\n    <span className=\"a-event-date-year\">{year}</span>\n  </time>\n);\n\nconst Icon = () => (\n  <div className=\"a-event-icon\">\n    <svg width=\"20\" height=\"20\">\n      <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"#FFFFFF\"></circle>\n    </svg>\n  </div>\n);\n\nconst EventDescription = styled.p`\n  font-size: 1rem;\n  color: #dddddd;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  \n  &:first-of-type {\n    padding-top: 0.8rem;\n  }\n`;\n\nconst Content = ({ event }) => (\n  <div className=\"m-event-block\">\n    <ImageCarousell\n      key={event.id}\n      thumbnail={event.thumbnail}\n      images={event.images}\n    />\n    <EventDescription>{event.description}</EventDescription>\n  </div>\n);\n\nconst TimelineList = styled.ul`\n  margin: 0.5rem 0 0 0;\n  padding: 0;\n  list-style: none;\n  position: relative;\n\n  /* The line */\n  @media ${size.large} {\n    &::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 4px;\n      background: #757575;\n      left: 25%;\n      margin-left: -37px;\n    }\n  }\n`;\n\nconst TimelineListItem = styled.li`\n  position: relative;\n  margin-top: 1rem;\n\n  @media ${size.large} {\n    margin-top: 4rem;\n  }\n`;\n\nexport const Timeline = ({ events }) => (\n  <div>\n    <TimelineList>\n      {events.map((event, i) => (\n        <TimelineListItem key={i}>\n          <TimeStamp month={event.month} year={event.year} />\n          <TechBadges technologies={event.tech} />\n          <Icon />\n          <Content event={event} />\n        </TimelineListItem>\n      ))}\n    </TimelineList>\n  </div>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { size } from './styles';\n\nconst FullscreenWrapper = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n\n  @media ${size.large} {\n    overflow: hidden;\n  }\n  background-color: #101010;\n`;\n\nconst InnerFullScreen = styled.div`\n  vertical-align: middle;\n  width: 100%;\n`;\n\nconst FullScreen = ({ children, results = [] }) => (\n  <FullscreenWrapper>\n    <InnerFullScreen>{children}</InnerFullScreen>\n  </FullscreenWrapper>\n);\n\nexport default FullScreen;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst colorPalettes = [\n  ['#110133', '#00918e', '#4dd599', '#ffdc34'],\n  ['#ffa259', '#fe6845', '#fa4252', '#91bd3a'],\n  ['#561f55', '#8b2f97', '#cf56a1', '#fcb2bf'],\n  ['#dff6f0', '#46b3e6', '#4d80e4', '#2e279d'],\n  ['#f8b195', '#f67280', '#4d80e4', '#6c5b7b'],\n  ['#39375b', '#745c97', '#d597ce', '#f5b0cb'],\n  ['#9be3de', '#beebe9', '#fffdf9', '#ffe3ed'],\n  ['#eafbea', '#6f9a8d', '#1f6650', '#ea5e5e'],\n];\n\nconst getRandomPalette = () => {\n  const palette =\n    colorPalettes[Math.floor(Math.random() * colorPalettes.length)];\n  return [...palette, ...palette, ...palette];\n};\n\nconst getRandomSizeDistrubution = ({ width, height, palette }) => {\n  const numCircles = palette.length;\n  const maxRadius = Math.floor((2 * Math.min(width, height)) / numCircles);\n  const minRadius = Math.floor(maxRadius / 8);\n  return palette.map(\n    () => minRadius + Math.floor(Math.random() * (maxRadius - minRadius))\n  );\n};\n\nconst getRandomPositions = ({ width, height, radiuses }) => {\n  return radiuses.map(radius => [\n    Math.floor(Math.random() * width),\n    Math.floor(Math.random() * height),\n  ]);\n};\n\nconst SVGCircle = styled.circle`\n  transition: all 1.5s;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nexport const AwesomeSVG = ({ width, height }) => {\n  const [palette, setPalette] = useState(getRandomPalette());\n  const [radiuses] = useState(\n    getRandomSizeDistrubution({ width, height, palette })\n  );\n  const [positions, setPositions] = useState(\n    getRandomPositions({ width, height, radiuses })\n  );\n\n  return (\n    <svg width={width} height={height} xmlns=\"http://www.w3.org/2000/svg\">\n      {positions.map(([cx, cy], i) => (\n        <SVGCircle\n          key={i}\n          transform={`translate(${cx}, ${cy})`}\n          r={radiuses[i]}\n          stroke=\"#212121\"\n          strokeWidth=\"1\"\n          fill={palette[i]}\n          onClick={() => {\n            setPositions(getRandomPositions({ width, height, radiuses }));\n            if (Math.random() > 0.93) {\n              setPalette(getRandomPalette());\n            }\n          }}\n        />\n      ))}\n    </svg>\n  );\n};\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport FullScreen from './FullScreen';\nimport { AwesomeSVG } from './AwesomeSVG';\nimport { useWindowSize } from '../hooks';\n\nconst FixedBottomLink = styled.a`\n  color: white;\n  text-decoration: none;\n  position: absolute;\n  left: 0;\n  bottom: 10px;\n  text-align: center;\n  width: 100%;\n  margin-bottom: 0.2rem;\n  transition: transform 0.5s;\n\n  &::after {\n    content: '▼';\n    margin: 0 10px;\n  }\n\n  &:hover {\n    transform: translateY(-0.3rem);\n  }\n`;\n\nconst Label = styled.h3`\n  font-family: 'Lato', Calibri, Arial, sans-serif;\n  font-size: 1.25rem;\n  display: inline;\n  \n`;\n\nexport const TopScreen = () => {\n  const size = useWindowSize();\n\n  return <FullScreen>\n    <AwesomeSVG width={size.width} height={size.height} />\n    <FixedBottomLink href=\"#timeline\">\n      <Label>Timeline</Label>\n    </FixedBottomLink>\n  </FullScreen>\n};\n","import { useState, useEffect } from 'react';\n\nexport const useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n","import React from 'react';\n\nimport { Timeline } from './Components/Timeline';\nimport { TopScreen } from './Components/TopScreen';\n\nconst App = () => {\n  const events = [\n    {\n      id: 1,\n      year: 2019,\n      month: 'January',\n      tech: {\n        'language': 'elm',\n        'platform': 'heroku',\n        'deployment': 'aws',\n        'library': 'elm-ui',\n        'projectType': 'personal',\n      },\n      link: 'https://github.com',\n      description: 'There was once upon a time a great warrior named Johnsson',\n      thumbnail:\n        'https://placebear.com/500/300',\n      images: [\n        'https://placebear.com/500/300',\n        'https://placebear.com/500/300',\n      ],\n    },\n    {\n      id: 2,\n      year: 2019,\n      month: 'January',\n      tech: {\n        'language': 'elm',\n        'platform': 'heroku',\n        'deployment': 'aws',\n        'library': 'elm-ui',\n        'projectType': 'personal',\n      },\n      link: 'https://github.com',\n      description: 'There was once upon a time a great warrior named Johnsson',\n      thumbnail:\n        'https://placebear.com/500/300',\n      images: [\n        'https://placebear.com/500/300',\n        'https://placebear.com/500/300',\n      ],\n    },\n  ];\n  return (\n    <div>\n      <TopScreen />\n      <Timeline events={events.filter(e => !e.muted)} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}